import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import javax.ws.rs.core.MediaType

import org.eclipse.jgit.api.Git
import org.eclipse.jgit.errors.UnsupportedCredentialItem
import org.eclipse.jgit.lib.TextProgressMonitor
import org.eclipse.jgit.transport.CredentialItem
import org.eclipse.jgit.transport.CredentialsProvider
import org.eclipse.jgit.transport.URIish
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.TaskAction

import com.sun.jersey.api.client.Client
import com.sun.jersey.api.client.ClientResponse
import com.sun.jersey.api.client.config.ClientConfig
import com.sun.jersey.api.client.config.DefaultClientConfig
import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter


buildscript {
	repositories { mavenCentral() }
	dependencies {
		classpath 'org.eclipse.jgit:org.eclipse.jgit:2.+'
		[
			'jersey-core',
			'jersey-client'
		].each { classpath "com.sun.jersey:$it:1.+" }
	}
}

task stage_list(type: StagingListTask)
task stage_close(type: StagingCloseTask) { repositoryId = getInput('repoId') }
task stage_drop(type: StagingDropTask) { repositoryId = getInput('repoId') }

task release(dependsOn: uploadArchives, type: AutoReleaseTask)


// sonatype uploadArchives , verify , release / REST API ?
// http://www.sonatype.com/people/2012/07/nexus-pro-automating-staging-workflow-with-gradle-using-the-nexus-rest-apis/
// https://github.com/sonatype/nexus/blob/master/nexus-maven-plugins/nexus-maven-plugin/src/main/java/org/sonatype/nexus/plugin/staging/AbstractStagingMojo.java
// https://github.com/sonatype/nexus/blob/master/nexus/nexus-clients/nexus-restlight-clients/nexus-restlight-stage-client/src/main/java/org/sonatype/nexus/restlight/stage/StageClient.java
abstract class SonaTypeTask extends DefaultTask {
	def repo = 'https://oss.sonatype.org/'

	@Input
	def profileName = project.group

	@Input
	def username = project.sonatypeUsername

	@Input
	def password = project.sonatypePassword

	def getInput(name) {
		if(project.hasProperty(name)) {
			return project[name]
		}
		return null
	}

	def resource(path) {
		ClientConfig cc = new DefaultClientConfig()
		Client c = Client.create(cc)
		c.followRedirects = true
		c.addFilter(new HTTPBasicAuthFilter(username, password))
		return c.resource(repo).path(path).accept(MediaType.APPLICATION_JSON_TYPE)
	}

	def toJson(r) {
		r.withReader {
			return new JsonSlurper().parse(it)
		}
	}

	def get(path) {
		toJson(resource(path).get(Reader))
	}

	def post(path, data) {
		def json = new JsonBuilder()
		json.data data
		resource(path)
				.type(MediaType.APPLICATION_JSON_TYPE)
				.post(ClientResponse, json.toString())
	}

	def getProfiles() {
		get('service/local/staging/profiles')?.data.findAll { it.name == profileName }
	}

	def list() {
		get('service/local/staging/profile_repositories')?.data.findAll { it.profileName == profileName }
	}

	def close(ids) {
		post('service/local/staging/bulk/close', [stagedRepositoryIds: ids, description : ''])
	}
	
	def reportClose(resp) {
		if(resp.status < 300) {
			logger.lifecycle 'uploaded artifact is closed'
		} else if(500 <= resp.status) {
			logger.error resp.getEntity(String)
			throw new RuntimeException(resp.toString())
		} else {
			def j = toJson(resp.getEntity(Reader))
			if(j?.errors) {
				j.errors.each { logger.error "$it.id $it.msg" }
			}
			if(j?.failures) {
				logger.error "$j.repositoryName"
				j.failures.each {
					logger.error "\t$it.ruleName"
					it.messages.each { logger.error "\t\t$it" }
				}
			}
			throw new RuntimeException()
		}
	}
	
	def release(ids) {
		post("service/local/staging/bulk/promote", [stagedRepositoryIds: ids, description : ''])
	}

	def drop(ids) {
		post("service/local/staging/bulk/drop", [stagedRepositoryIds: ids, description : ''])
	}
}

class StagingListTask extends SonaTypeTask {
	@TaskAction
	def stage_list() {
		list().each {
			it.each { logger.lifecycle String.format('%-22s %s',it.key, it.value) }
			logger.lifecycle ""
		}
	}
}

class StagingCloseTask extends SonaTypeTask {
	@Input
	def repositoryId

	@TaskAction
	def stage_close() {
		reportClose close([repositoryId])
	}
}

class StagingDropTask extends SonaTypeTask {
	@Input
	def repositoryId

	@TaskAction
	def stage_drop() {
		def resp = drop([repositoryId])
		if(resp.status < 300) {
			logger.lifecycle 'drop succeed'
		} else {
			throw new RuntimeException(resp.toString())
		}
	}
}

class AutoReleaseTask extends SonaTypeTask {
	
	@TaskAction
	def autoRelease() {
		def repos = list().findAll { it.type == 'open' }
		if(repos.size() < 1) {
			throw new RuntimeException("no uploaded contents")
		}
		def r = selectRepo(repos)
		reportClose(close([r.repositoryId]))
		tagging()
		def resp = release([r.repositoryId])
		if(resp.status < 300) {
			logger.lifecycle 'release succeed'
		} else {
			throw new RuntimeException(resp.toString())
		}
	}
	
	def selectRepo(repos) {
		if(repos.size() == 1) {
			return repos[0]
		} else {
			return repos.sort { l, r -> r.createdTimestamp <=> l.createdTimestamp }[0]
		}
	}
	
	def tagging() {
		def g = Git.open project.file('.git')
		def n = project.version
		try {
			g.tag() setName n setMessage "release $n" call()
			g.push().setPushTags().setCredentialsProvider new CP(project) setProgressMonitor new TextProgressMonitor() call()
		} catch(e) {
			g.tagDelete().setTags(n).call()
			throw e
		} finally {
			g.repository.close()
		}
	}
}

class CP extends CredentialsProvider {
	def username
	def password
	def passphrase
	CP(project) {
		this.username = project['github.username']
		this.password = project['github.password']
		this.passphrase = project['ssh.passphrase']
	}
	def boolean isInteractive() {
		false
	}
	def boolean supports(CredentialItem... items) {
		true
	}
	def boolean get(URIish uri, CredentialItem... items) {
		items.each {
			if (it instanceof CredentialItem.Username) {
				it.value = username
				return true
			} else if (it instanceof CredentialItem.Password) {
				it.value = password
				return true
			} else if(it instanceof CredentialItem.StringType) {
				it.value = passphrase
				return true
			} else {
				throw new UnsupportedCredentialItem(uri, it.promptText);
			}
		}
	}
}
